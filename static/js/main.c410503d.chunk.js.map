{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Card.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Jumbotron","id","Card","props","src","image","alt","name","onClick","handleIncrement","Header","count","highScore","App","state","trains","_this2","this","setState","sort","Math","random","components_Navbar","components_Jumbotron","components_Header","map","train","components_Card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"opdAsBeA,MAnBf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,iEAAjC,0BCSbC,MAhBf,WACI,OACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYG,GAAG,SAE5BN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,uFCuCXI,MA/Cf,SAAcC,GAgCV,OAEIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKO,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,KAAMC,QAASL,EAAMM,2BC3BxDC,MAZf,SAAgBP,GAEhB,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UAGoBK,EAAMQ,MAH1B,kBAGgDR,EAAMS,mBCqD3CC,6MAnDbC,MAAQ,CACNC,SACAJ,MAAO,EACPC,UAAW,2EAKJ,IAAAI,EAAAC,KAEDR,EAAkB,WAEzBO,EAAKE,SAAS,CAACP,MAAOK,EAAKF,MAAMH,MAAQ,KAWxC,OARDI,EAAOI,KAAK,iBAAM,GAAKC,KAAKC,WAGrBJ,KAAKH,MAAMH,MAAQM,KAAKH,MAAMF,WAChCK,KAAKC,SAAS,CAACN,UAAWK,KAAKH,MAAMH,QAKzChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,CACCb,MAAOM,KAAKH,MAAMH,MAClBC,UAAWK,KAAKH,MAAMF,YAItBK,KAAKH,MAAMC,OAAOU,IAAI,SAAAC,GAAK,OAC5B/B,EAAAC,EAAAC,cAAC8B,EAAD,CAEAtB,MAAOqB,EAAMrB,MACbE,KAAMmB,EAAMnB,KAEZE,gBAAiBA,EACjBmB,IAAKF,EAAMzB,eA1CC4B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c410503d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-12\">\r\n                <nav className=\"navbar navbar-default\">\r\n                        <div className=\"container-fluid\">\r\n                          <div className=\"navbar-header\">\r\n                            <a className=\"navbar-brand\" href=\"C:\\Users\\vinnie\\VinUCFWork\\clicky game static\\index.html\">Click Game</a>\r\n                          </div>\r\n                            \r\n                        </div>\r\n                      </nav>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"../styles/Jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\n    return(\r\n    <div className=\"row\">\r\n        <div className=\"col-lg-12\">\r\n                <div className=\"jumbotron jumbotron-fluid\">\r\n                        <div className=\"container\" id=\"jumbo\">\r\n                            {/*<br>*/}\r\n                          <h1 className=\"display-4\">Clicky Game</h1>\r\n                          <p className=\"lead\">Click on an image to score points, but don't click the same image twice!</p>\r\n                        </div>\r\n                </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport \"../styles/Card.css\";\r\n\r\nfunction Card(props) {\r\n    // handleClick = id => {\r\n    //     let doubleClick;\r\n    //     let update = {\r\n    //         heroes: [...this.state.heroes],\r\n    //         score: this.state.score,\r\n    //         topScore: this.state.topScore\r\n    //     }\r\n    // }\r\n\r\n    // randomizing the trains\r\n    // update.newTrains = update.newTrains.sort(() => .5 - Math.random());\r\n    \r\n    \r\n    // using trains.json, if this.id is clicked then countClick goes up\r\n        // if (this.trains.id.click === true) {\r\n        //     this.setState({clickCount: this.state.clickCount + 1})\r\n        // }\r\n        \r\n    // after count click is at 2, then doubleClick changes to true and\r\n    // end game\r\n  // };\r\n\r\n// let scoreData = {\r\n//   score: 0,\r\n//   highScore: 0\r\n// }\r\n//  handleClick = () => {\r\n//   console.log(\"clicked\");\r\n//  }\r\n   // const Card = () => {\r\n    \r\n    return (\r\n\r\n        <div className=\"container\">\r\n            \r\n        \r\n            <div className=\"img-container\">\r\n                <img src={props.image} alt={props.name} onClick={props.handleIncrement} />\r\n            </div>\r\n        </div>\r\n              \r\n        \r\n    );\r\n    } \r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport '../styles/Header.css'\r\nfunction Header(props) {\r\n\r\nreturn(\r\n    <div className=\"header\" >\r\n        \r\n    \r\n                Score: {props.count} | High Score: {props.highScore}\r\n            </div>\r\n    \r\n);\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './styles/App.css';\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport Card from './components/Card';\nimport Header from './components/Header';\nimport trains from './trains.json';\n\nclass App extends React.Component {\n\n  state = {\n    trains,\n    count: 0,\n    highScore: 0 \n  };\n\n  \n  \n  render() {\n    // handleIncrement increases this.state.count by 1\n    const handleIncrement = () => {\n     // We always use the setState method to update a component's state\n   this.setState({count: this.state.count + 1})};\n   \n   // randomizes image positions display\n   trains.sort(() => .5 - Math.random());\n\n   // get high score \n      if (this.state.count > this.state.highScore) {\n        this.setState({highScore: this.state.count})\n      }\n    \n\n    return (\n    <div className=\"App\">\n      <Navbar />\n      <Jumbotron />\n      <Header\n       count={this.state.count}\n       highScore={this.state.highScore}\n       />\n        \n        \n      {this.state.trains.map(train => (\n      <Card\n      \n      image={train.image}\n      name={train.name} \n      \n      handleIncrement={handleIncrement}\n      key={train.id}\n      \n      />\n      ))\n    }\n    \n    </div>\n  );\n }\n}\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}